buildscript {
    dependencies {
        classpath(
                // TODO: remove as soon as https://github.com/spotbugs/spotbugs-gradle-plugin/issues/147 is fixed
                [group: 'com.google.guava', name: 'guava', version: guavaVersion],

                [group: 'com.ihsmarkit.tfx.gradle', name: 'sca-gradle-plugin', version: scaGradlePluginVersion],
                [group: 'com.ihsmarkit.tfx.gradle', name: 'idea-gradle-plugin', version: ideaGradlePluginVersion],
                [group: 'com.ihsmarkit.tfx.gradle', name: 'test-configuration-gradle-plugin', version: testConfigurationGradlePluginVersion]
        )
    }
}

plugins {
    id 'org.springframework.boot' version '2.1.3.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'org.hidetake.swagger.generator' version '2.18.1'
    id 'idea'

}

project.sourceCompatibility = javaVersion
project.targetCompatibility = javaVersion

apply plugin: 'com.ihsmarkit.tfx.gradle.sca'
apply plugin: 'com.ihsmarkit.tfx.gradle.idea'
apply plugin: 'com.ihsmarkit.tfx.gradle.test-configuration'

dependencyManagement {
    imports {
        mavenBom("com.ihsmarkit.tfx:tfx-dependencies:$tfxDependenciesVersion")
    }
}

dependencies {
    annotationProcessor(
            [group: 'org.mapstruct', name: 'mapstruct-processor'],
            [group: 'org.projectlombok', name: 'lombok']
    )

    testAnnotationProcessor(
            [group: 'org.mapstruct', name: 'mapstruct-processor'],
            [group: 'org.projectlombok', name: 'lombok']
    )

    implementation(
            [group: 'com.ihsmarkit.tfx', name: 'common', version: tfxCommonVersion],
            [group: 'com.ihsmarkit.tfx', name: 'core-domain', version: coreDomainVersion],
            [group: 'com.ihsmarkit.tfx', name: 'core-config', version: coreConfigVersion],
            [group: 'com.ihsmarkit.tfx', name: 'core-dl', version: coreDlVersion],
            [group: 'com.ihsmarkit.tfx', name: 'collateral-calculator', version: collateralCalculatorVersion],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-activemq'],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'],
            [group: 'org.apache.activemq', name: 'activemq-client'],
            [group: 'com.google.guava', name: 'guava'],
            [group: 'org.projectlombok', name: 'lombok'],
            [group: 'org.mapstruct', name: 'mapstruct'],
            [group: 'org.apache.commons', name: 'commons-lang3'],
            [group: 'commons-io', name: 'commons-io'],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-web'],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-batch'],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-quartz'],
            [group: 'org.springframework.cloud', name: 'spring-cloud-starter-sleuth'],
            [group: 'org.springframework', name: 'spring-jms'],
            [group: 'org.yaml', name: 'snakeyaml'],
            [group: 'io.swagger', name: 'swagger-annotations'],
            [group: 'io.springfox', name: 'springfox-swagger2'],
            [group: 'io.springfox', name: 'springfox-swagger-ui']
    )

    runtimeOnly(
        [group: 'com.zaxxer', name: 'HikariCP'],
        [group: 'mysql', name: 'mysql-connector-java']
    )

    testImplementation(
            [group: 'com.ihsmarkit.tfx', name: 'common', classifier: 'tests', version: tfxCommonVersion],
            [group: 'com.ihsmarkit.tfx', name: 'core-dl', classifier: 'tests', version: coreDlVersion],
            [group: 'com.ihsmarkit.tfx', name: 'core-domain', classifier: 'tests', version: coreDomainVersion],
            [group: 'com.ihsmarkit.tfx', name: 'core-config', classifier: 'tests', version: coreConfigVersion],
            [group: 'org.apache.activemq', name: 'activemq-pool'],
            [group: 'org.apache.activemq.tooling', name: 'activemq-junit'],
            [group: 'org.dbunit', name: 'dbunit'],
            [group: 'com.github.springtestdbunit', name: 'spring-test-dbunit'],
            [group: 'net.ttddyy', name: 'datasource-assert'],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-test'],
            [group: 'org.springframework.batch', name: 'spring-batch-test'],
            [group: 'org.junit.jupiter', name: 'junit-jupiter-api'],
            [group: 'org.junit.jupiter', name: 'junit-jupiter-engine'],
            [group: 'org.junit.jupiter', name: 'junit-jupiter-params'],
            [group: 'org.assertj', name: 'assertj-core'],
            [group: 'org.mockito', name: 'mockito-junit-jupiter'],
            [group: 'com.github.gavlyukovskiy', name: 'datasource-proxy-spring-boot-starter']
    )

    swaggerCodegen (
            [group: 'org.openapitools', name: 'openapi-generator-cli']
    )
}

class BatchGenerateOpenApiContractsTask extends org.hidetake.gradle.swagger.generator.GenerateSwaggerCode {

    @InputFiles
    Collection<File> contracts

    @Override
    void exec() {
        contracts.each {
            inputFile = it
            super.exec();
        }
    }
}

task generateOpenApiContracts(type: BatchGenerateOpenApiContractsTask) {
    contracts = [
            'eod-control-api'
    ]
            .collect { file("$projectDir/src/main/resources/contract/${it}.yaml") }

    inputFile = file("$projectDir/src/main/resources/contract/") // ignored
    wipeOutputDir = false
    rawOptions = [
            '--api-package', 'com.ihsmarkit.tfx.eod.api',
            '--model-package', 'com.ihsmarkit.tfx.eod.model.dto',
            '--model-name-suffix', 'Dto'
    ]
    language = 'spring'
    outputDir = file("$buildDir/generated")
    additionalProperties = [
            library           : 'spring-mvc',
            interfaceOnly     : 'true',
            dateLibrary       : 'java8',
            java8             : 'true',
            useTags           : 'true',
            bigDecimalAsString: 'true'
    ]
}

compileJava.dependsOn(generateOpenApiContracts)

sourceSets {
    main {
        java {
            srcDirs += "$buildDir/generated/src/main/java"
        }
    }
}

idea {
    module {
        generatedSourceDirs += file("$buildDir/generated/src/main/java")
    }
}

configurations.compile.exclude(group: 'com.zaxxer', module: 'HikariCP-java7')

test {
    useJUnitPlatform()
}

test {
    testLogging.showStandardStreams = true
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters' //<< "-Xlint:unchecked" << "-Xlint:deprecation" << "-Werror" << "-Xmaxerrs" << "1000"
}

ext.additionalJacocoExclusions = [
        // quite hard to verify invocation of TradeHolder.merge
        '**/eod/batch/ledger/marketdata/DailyMarketDataReader$TradeHolder*'
]

jarPublishing()